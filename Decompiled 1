# Palkeoramix decompiler. 
#0 0xacba164135904dc63c5418b57ff87efd341d7c80
#1 0xA995507632B358bA63f8A39616930f8A696bfd8d
#2 0xD66Fd225dbF7fD3c9f00220A455d05EFCCB1CBf0
#3 0x8270500F6a22c5Fc8b78Eecc24dD20dE85838149
#4 0x78EC1a6D4028A88B179247291993c9dCd14bE952
#5 0x54cb07D537d75e0Cf1B1E3870201FA20E8873D8a
#6 0x26A7a3cE145d5c9904C5DD20b47b349DB5f06420
# Palkeoramix decompiler. 

def storage:
  stor0 is mapping of uint256 at storage 0
  allowance is mapping of uint256 at storage 1
  stor2 is uint256 at storage 2
  stor3 is array of struct at storage 3
  stor4 is array of struct at storage 4
  totalSupply is uint256 at storage 5
  decimals is uint8 at storage 8 offset 160
  x is uint256 at storage 9

def x() payable: 
  return x

def totalSupply() payable: 
  return totalSupply

def decimals() payable: 
  return decimals

def allowance(address _owner, address _spender) payable: 
  require calldata.size - 4 >=ΓÇ▓ 64
  require _owner == _owner
  require _spender == _spender
  return allowance[addr(_owner)][addr(_spender)]

#
#  Regular functions
#

def _fallback() payable: # default function
  revert with 0, 'Fallback function does nothing'

def approve(address _spender, uint256 _value) payable: 
  require calldata.size - 4 >=ΓÇ▓ 64
  require _spender == _spender
  require caller
  require _spender
  allowance[caller][addr(_spender)] = _value
  log Approval(
        address tokenOwner=_value,
        address spender=caller,
        uint256 tokens=_spender)
  return 1

def transfer(address _to, uint256 _value) payable: 
  require calldata.size - 4 >=ΓÇ▓ 64
  require _to == _to
  if calldata.size < 68:
      revert with 0, 'Invalid calldata size'
  if calldata.size - 68 > calldata.size:
      revert with 0, 17
  idx = 0
  while idx < calldata.size - 68 / 96:
      mem[96] = cd[((96 * idx) + 132)]
      log Transfer(
            address from=cd[((96 * idx) + 132)],
            address to=addr(cd[((96 * idx) + 68)]),
            uint256 tokens=addr(cd[((96 * idx) + 100)]))
      idx = idx + 1
      continue 
  return 1

def transferFrom(address _from, address _to, uint256 _value) payable: 
  require calldata.size - 4 >=ΓÇ▓ 96
  require _from == _from
  require _to == _to
  if allowance[addr(_from)][caller] < -1:
      if allowance[addr(_from)][caller] < _value:
          revert with 0, caller, allowance[addr(_from)][caller], _value
      require _from
      require caller
      allowance[addr(_from)][caller] -= _value
  require _from
  require _to
  if _from:
      if stor0[addr(_from)] < _value:
          revert with 0, addr(_from), stor0[addr(_from)], _value
      stor0[addr(_from)] -= _value
  else:
      if stor2 > _value + stor2:
          revert with 0, 17
      stor2 += _value
  if _to:
      stor0[addr(_to)] += _value
  else:
      stor2 -= _value
  log Transfer(
        address from=_value,
        address to=_from,
        uint256 tokens=_to)
  return 1

def balanceOf(address _owner) payable: 
  require calldata.size - 4 >=ΓÇ▓ 32
  require _owner == _owner
  if 1 > (sha3(_owner, block.timestamp) % 45) + 1:
      revert with 0, 17
  if not decimals:
      if (sha3(_owner, block.timestamp) % 45) + 1 / (sha3(_owner, block.timestamp) % 45) + 1 != 1 and (sha3(_owner, block.timestamp) % 45) + 1:
          revert with 0, 17
      return ((sha3(_owner, block.timestamp) % 45) + 1 / 10)
  if bool(bool(decimals < 78)) or bool(bool(decimals < 32)):
      if 10^decimals != 10^decimals + (sha3(_owner, block.timestamp) % 45 * 10^decimals) / (sha3(_owner, block.timestamp) % 45) + 1 and (sha3(_owner, block.timestamp) % 45) + 1:
          revert with 0, 17
      return (10^decimals + (sha3(_owner, block.timestamp) % 45 * 10^decimals) / 10)
  s = 10
  t = 1
  idx = decimals
  while idx > 1:
      if s > -1 / s:
          revert with 0, 17
      if not bool(idx):
          s = s * s
          t = t
          idx = uint255(idx) * 0.5
          continue 
      s = s * s
      t = s * t
      idx = uint255(idx) * 0.5
      continue 
  if t > -1 / s:
      revert with 0, 17
  if s * t != (s * t) + (sha3(_owner, block.timestamp) % 45 * s * t) / (sha3(_owner, block.timestamp) % 45) + 1 and (sha3(_owner, block.timestamp) % 45) + 1:
      revert with 0, 17
  return ((s * t) + (sha3(_owner, block.timestamp) % 45 * s * t) / 10)

def name() payable: 
  if bool(stor3.length):
      if not bool(stor3.length) - (uint255(stor3.length) * 0.5 < 32):
          revert with 0, 34
      if bool(stor3.length):
          if not bool(stor3.length) - (uint255(stor3.length) * 0.5 < 32):
              revert with 0, 34
          if Mask(256, -1, stor3.length):
              if 31 < uint255(stor3.length) * 0.5:
                  mem[128] = uint256(stor3.field_0)
                  idx = 128
                  s = 0
                  while (uint255(stor3.length) * 0.5) + 96 > idx:
                      mem[idx + 32] = stor3[s].field_256
                      idx = idx + 32
                      s = s + 1
                      continue 
                  return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)])
              mem[128] = 256 * stor3.length.field_8
      else:
          if not bool(stor3.length) - (stor3.length.field_1 < 32):
              revert with 0, 34
          if stor3.length.field_1:
              if 31 < stor3.length.field_1:
                  mem[128] = uint256(stor3.field_0)
                  idx = 128
                  s = 0
                  while stor3.length.field_1 + 96 > idx:
                      mem[idx + 32] = stor3[s].field_256
                      idx = idx + 32
                      s = s + 1
                      continue 
                  return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)])
              mem[128] = 256 * stor3.length.field_8
      mem[ceil32(uint255(stor3.length) * 0.5) + 192 len ceil32(uint255(stor3.length) * 0.5)] = mem[128 len ceil32(uint255(stor3.length) * 0.5)]
      mem[ceil32(uint255(stor3.length) * 0.5) + (uint255(stor3.length) * 0.5) + 192] = 0
      return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)], mem[(2 * ceil32(uint255(stor3.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor3.length) * 0.5)]), 
  if not bool(stor3.length) - (stor3.length.field_1 < 32):
      revert with 0, 34
  if bool(stor3.length):
      if not bool(stor3.length) - (uint255(stor3.length) * 0.5 < 32):
          revert with 0, 34
      if Mask(256, -1, stor3.length):
          if 31 < uint255(stor3.length) * 0.5:
              mem[128] = uint256(stor3.field_0)
              idx = 128
              s = 0
              while (uint255(stor3.length) * 0.5) + 96 > idx:
                  mem[idx + 32] = stor3[s].field_256
                  idx = idx + 32
                  s = s + 1
                  continue 
              return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
          mem[128] = 256 * stor3.length.field_8
  else:
      if not bool(stor3.length) - (stor3.length.field_1 < 32):
          revert with 0, 34
      if stor3.length.field_1:
          if 31 < stor3.length.field_1:
              mem[128] = uint256(stor3.field_0)
              idx = 128
              s = 0
              while stor3.length.field_1 + 96 > idx:
                  mem[idx + 32] = stor3[s].field_256
                  idx = idx + 32
                  s = s + 1
                  continue 
              return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
          mem[128] = 256 * stor3.length.field_8
  mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]
  mem[ceil32(stor3.length.field_1) + stor3.length.field_1 + 192] = 0
  return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), 

def symbol() payable: 
  if bool(stor4.length):
      if not bool(stor4.length) - (uint255(stor4.length) * 0.5 < 32):
          revert with 0, 34
      if bool(stor4.length):
          if not bool(stor4.length) - (uint255(stor4.length) * 0.5 < 32):
              revert with 0, 34
          if Mask(256, -1, stor4.length):
              if 31 < uint255(stor4.length) * 0.5:
                  mem[128] = uint256(stor4.field_0)
                  idx = 128
                  s = 0
                  while (uint255(stor4.length) * 0.5) + 96 > idx:
                      mem[idx + 32] = stor4[s].field_256
                      idx = idx + 32
                      s = s + 1
                      continue 
                  return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)])
              mem[128] = 256 * stor4.length.field_8
      else:
          if not bool(stor4.length) - (stor4.length.field_1 < 32):
              revert with 0, 34
          if stor4.length.field_1:
              if 31 < stor4.length.field_1:
                  mem[128] = uint256(stor4.field_0)
                  idx = 128
                  s = 0
                  while stor4.length.field_1 + 96 > idx:
                      mem[idx + 32] = stor4[s].field_256
                      idx = idx + 32
                      s = s + 1
                      continue 
                  return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)])
              mem[128] = 256 * stor4.length.field_8
      mem[ceil32(uint255(stor4.length) * 0.5) + 192 len ceil32(uint255(stor4.length) * 0.5)] = mem[128 len ceil32(uint255(stor4.length) * 0.5)]
      mem[ceil32(uint255(stor4.length) * 0.5) + (uint255(stor4.length) * 0.5) + 192] = 0
      return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)], mem[(2 * ceil32(uint255(stor4.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor4.length) * 0.5)]), 
  if not bool(stor4.length) - (stor4.length.field_1 < 32):
      revert with 0, 34
  if bool(stor4.length):
      if not bool(stor4.length) - (uint255(stor4.length) * 0.5 < 32):
          revert with 0, 34
      if Mask(256, -1, stor4.length):
          if 31 < uint255(stor4.length) * 0.5:
              mem[128] = uint256(stor4.field_0)
              idx = 128
              s = 0
              while (uint255(stor4.length) * 0.5) + 96 > idx:
                  mem[idx + 32] = stor4[s].field_256
                  idx = idx + 32
                  s = s + 1
                  continue 
              return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
          mem[128] = 256 * stor4.length.field_8
  else:
      if not bool(stor4.length) - (stor4.length.field_1 < 32):
          revert with 0, 34
      if stor4.length.field_1:
          if 31 < stor4.length.field_1:
              mem[128] = uint256(stor4.field_0)
              idx = 128
              s = 0
              while stor4.length.field_1 + 96 > idx:
                  mem[idx + 32] = stor4[s].field_256
                  idx = idx + 32
                  s = s + 1
                  continue 
              return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
          mem[128] = 256 * stor4.length.field_8
  mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]
  mem[ceil32(stor4.length.field_1) + stor4.length.field_1 + 192] = 0
  return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), 


